type User {
  id: ID!
  image: String
  username: String!
  bio: String
  email: String!
  followedByViewer: Boolean!

  articles(
    first: Int
    after: String
  ): ArticleConnection!

  favoriteArticles(
    first: Int
    after: String
  ): ArticleConnection!

  followers(
    first: Int
    after: String
  ): FollowersConnection!
 
}

input CreateUserInput {
    username: String!
    email: String!
    password: String!
}

type CreateUserPayload {
    errors: [UserError!]!
    user: User
}

input SignInUserInput {
    email: String!
    password: String!
}

type SignInUserPayload {
    errors: [UserError!]!
    token: String
    viewer: Viewer
}

input UnfollowUserInput {
    id: ID!
}

type UnfollowUserPayload {
    user: User
}

input UpdateUserInput {
  email: String!
  username: String!
  bio: String
  image: String
  password: String
}

type UpdateUserPayload {
  errors: [UserError!]!
  user: User
}

type UserEdge {
  cursor: String!
  node: User
}

type UserError {
    message: String!
    path: String
}

type FollowersConnection {
    edges: [UserEdge]
    nodes: [User]
    pageInfo: PageInfo!
    totalCount: Int!
}

input FollowUserInput {
    id: ID!
}

type FollowUserPayload {
    user: User
}

type Query {
    user(username: String!): User
}

type Mutation {
    createUser(input: CreateUserInput!): CreateUserPayload
    followUser(input: FollowUserInput!): FollowUserPayload
    signInUser(input: SignInUserInput!): SignInUserPayload
    unfollowUser(input: UnfollowUserInput!): UnfollowUserPayload
    updateUser(input: UpdateUserInput!): UpdateUserPayload
}